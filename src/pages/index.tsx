import { type NextPage } from "next";
import Head from "next/head";
import React, { useState } from "react";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import * as ScrollArea from "@radix-ui/react-scroll-area";
import {
  IoCheckmarkCircle,
  IoClose,
  IoEllipseOutline,
  IoPencil,
} from "react-icons/io5";

import { api } from "~/utils/api";
import { type Todo } from "@prisma/client";

const Home: NextPage = () => {
  const utils = api.useContext();
  const [todoInput, setTodoInput] = useState("");
  const [selectTodo, setSelectTodo] = useState<Todo | null>(null);
  const todos = api.todo.getAll.useQuery();
  const { mutate: create } = api.todo.create.useMutation({
    onSuccess: async () => {
      await utils.todo.getAll.invalidate();
      setTodoInput("");
    },
  });
  const { mutate: deleteTodo } = api.todo.delete.useMutation({
    onSuccess: async () => {
      await utils.todo.getAll.invalidate();
    },
  });
  const { mutate: updateTodo } = api.todo.update.useMutation({
    onSuccess: async () => {
      await utils.todo.getAll.invalidate();
      setTodoInput("");
      setSelectTodo(null);
    },
  });
  const { mutate: toggleComplete } = api.todo.toggleComplete.useMutation({
    onSuccess: async () => {
      await utils.todo.getAll.invalidate();
    },
  });

  return (
    <>
      <Head>
        <title>Nextodo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-screen items-center justify-center">
        <div className="flex w-80 flex-col gap-5">
          <p className="font-semibold">NEXTODO</p>
          <div className="flex w-full gap-2">
            <Input
              type="text"
              name="todoInput"
              placeholder="Enter your todo"
              value={todoInput}
              onChange={(v) => {
                v.preventDefault();
                setTodoInput(v.target.value);
              }}
            />
            <Button
              variant={"outline"}
              // type="submit"
              onClick={() => {
                selectTodo
                  ? todoInput == ""
                    ? setSelectTodo(null)
                    : updateTodo({ text: todoInput, id: selectTodo.id })
                  : create({ text: todoInput });
              }}
            >
              {selectTodo ? (todoInput == "" ? "Cancel" : "Update") : "Add"}
            </Button>
          </div>
          <div className="h-80 rounded-lg border border-gray-200">
            <ScrollArea.Root className="scrollbar-thin scrollbar-thumb-mauve-10 scrollbar-track-blackA6 scrollbar-thumb-rounded scrollbar-track-rounded h-full w-full overflow-hidden">
              <ScrollArea.Viewport className="h-full">
                {todos.data?.map((todo) => (
                  <div
                    key={todo.id}
                    className="mb-1 flex items-center justify-between rounded-lg p-2.5 hover:bg-gray-50"
                  >
                    <button
                      className="mr-2 rounded-sm text-gray-400 hover:text-black"
                      onClick={() => {
                        toggleComplete({
                          id: todo.id,
                          isComplete: !todo.isCompleted,
                        });
                      }}
                    >
                      {todo.isCompleted ? (
                        <IoCheckmarkCircle
                          size={18}
                          className="text-green-600"
                        />
                      ) : (
                        <IoEllipseOutline size={18} />
                      )}
                    </button>
                    <p className={"w-full"}>{todo.todo}</p>
                    <div className="flex gap-2.5">
                      <button
                        className="rounded-sm text-gray-400 hover:text-black"
                        onClick={() => {
                          setTodoInput(todo.todo);
                          setSelectTodo(todo);
                        }}
                      >
                        <IoPencil size={18} />
                      </button>
                      <button
                        className="rounded-sm text-gray-400 hover:text-red-500"
                        onClick={() => deleteTodo({ id: todo.id })}
                      >
                        <IoClose size={18} />
                      </button>
                    </div>
                  </div>
                ))}
              </ScrollArea.Viewport>
              <ScrollArea.Scrollbar
                className="w-scrollbar-size h-scrollbar-size bg-blackA6 duration-160 scrollbar-thumb-mauve-10 scrollbar-track-blackA8 scrollbar-thumb-rounded scrollbar-track-rounded flex select-none items-center justify-center transition-colors ease-out"
                orientation="vertical"
              >
                <ScrollArea.Thumb className="relative flex-1">
                  <div className="min-w-44 min-h-44 absolute inset-0 h-full w-full"></div>
                </ScrollArea.Thumb>
              </ScrollArea.Scrollbar>
              <ScrollArea.Scrollbar
                className="w-scrollbar-size h-scrollbar-size bg-blackA6 duration-160 scrollbar-thumb-mauve-10 scrollbar-track-blackA8 scrollbar-thumb-rounded scrollbar-track-rounded flex select-none flex-col items-center justify-center transition-colors ease-out"
                orientation="horizontal"
              >
                <ScrollArea.Thumb className="relative flex-1">
                  <div className="min-w-44 min-h-44 absolute inset-0 h-full w-full"></div>
                </ScrollArea.Thumb>
              </ScrollArea.Scrollbar>
              <ScrollArea.Corner className="bg-blackA8"></ScrollArea.Corner>
            </ScrollArea.Root>
          </div>
          <p className="text-xs text-gray-400">
            built by your truely{" "}
            <span className="text-blue-600 hover:underline">
              <a
                href="https://portfolio-bornunnusual.vercel.app/"
                target="_blank"
              >
                Chhun Viphou
              </a>
            </span>
          </p>
        </div>
      </main>
    </>
  );
};

export default Home;
